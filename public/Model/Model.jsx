/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 model.glb 
*/

import { useLoader } from "@react-three/fiber";
import { TextureLoader } from "three";
import { React, useEffect, useState } from "react";
import { useGLTF, useTexture, Html } from "@react-three/drei";
import * as THREE from "three";
import projects from "./projects.json";

export default function Model(props) {
  const { nodes, materials } = useGLTF("./Model/model.glb");
  const [projects, setProjects] = useState([]);
  useEffect(() => {
    fetch("/Model/projects.json")
      .then((res) => res.json())
      .then(setProjects);
  }, []);
  const handleClick = (url) => {
    // if (props.opacity > 0.9) {
    // }
    console.log(`clicked ${url}`);
    window.open(url, "_blank");
  };

  // const video = document.createElement("video");

  // video.src = "./tv.mp4";
  // // video.muted = false;
  // video.volume = 0.9;
  // video.loop = true;

  // video.play();

  // const TVScreen = new THREE.VideoTexture(video);

  // TVScreen.center.set(0.65, 0.32);
  // TVScreen.rotation = Math.PI / 2;
  // TVScreen.repeat.set(2, 1); // Zooms out to show more of the video (50%)
  // TVScreen.wrapS = THREE.ClampToEdgeWrapping;
  // TVScreen.wrapT = THREE.ClampToEdgeWrapping;

 

const video = document.createElement("video");

video.src = "./tv.mp4";
video.muted = true;             
video.volume = 0;              
video.loop = true;
video.playsInline = true;       
video.autoplay = true;           
video.muted = true;            
video.autoplay = true;         
video.playsInline = true;      
video.loop = true;
video.preload = 'auto';  
video.play().catch((err) => {
  console.warn("Autoplay failed:", err);
});

const TVScreen = new THREE.VideoTexture(video);

// Texture settings
TVScreen.center.set(0.65, 0.32);
TVScreen.rotation = Math.PI / 2;
TVScreen.repeat.set(2, 1);
TVScreen.wrapS = THREE.ClampToEdgeWrapping;
TVScreen.wrapT = THREE.ClampToEdgeWrapping;


  function MessageBox() {
    const [formData, setFormData] = useState({
      name: "",
      email: "",
      message: "",
    });
    const styles = {
      wrapper: {
        display: "flex",
        background: "#ffffffcc",
        padding: "20px",
        borderRadius: "8px",
        boxShadow: "0 0 10px rgba(0,0,0,0.2)",
        gap: "20px",
        alignItems: "center",
      },
      image: {
        objectFit: "fill",
        imageRendering: "auto",
        width: "110px",
        height: "230px",
        borderRadius: "8px",
      },
      form: {
        display: "flex",
        flexDirection: "column",
        gap: "10px",
        height: "250px",
        width: "130px",
      },
      input: {
        padding: "8px",
        borderRadius: "4px",
        border: "1px solid #ccc",
      },
      textarea: {
        padding: "8px",
        borderRadius: "4px",
        border: "1px solid #ccc",
      },
      button: {
        padding: "10px",
        backgroundColor: "#007bff",
        color: "#fff",
        border: "none",
        borderRadius: "4px",
      },
    };

    const handleSubmit = (e) => {
      e.preventDefault();
      alert("Message sent!");
    };

    return (
      <Html
        transform
        position={[0, 0, 0]}
        rotation={[1.598, 3, 3.129]}
        distanceFactor={2.3}
      >
        <div style={styles.wrapper}>
          <img
            src="./Textures/courage2.jpg"
            alt="Contact"
            style={styles.image}
          />
          <form onSubmit={handleSubmit} style={styles.form}>
            <input
              type="text"
              placeholder="Your Name"
              required
              style={styles.input}
            />
            <input
              type="email"
              placeholder="Your Email"
              required
              style={styles.input}
            />
            <textarea
              placeholder="Your Message"
              rows="4"
              required
              style={styles.textarea}
            />
            <button type="submit" style={styles.button}>
              Send
            </button>
          </form>
        </div>
      </Html>
    );
  }

  const styles = {
    container: {
      background: "#ffffffcc",
      padding: "20px",
      borderRadius: "8px",
      width: "20px",
      height: "100px",
      boxShadow: "0 0 10px rgba(0,0,0,0.2)",
    },
    form: {
      display: "flex",
      flexDirection: "column",
      gap: "10px",
    },
    input: {
      padding: "8px",
      border: "1px solid #ccc",
      borderRadius: "4px",
      fontSize: "14px",
    },
    textarea: {
      padding: "8px",
      border: "1px solid #ccc",
      borderRadius: "4px",
      fontSize: "14px",
      resize: "none",
    },
    button: {
      padding: "10px",
      background: "#007bff",
      color: "#fff",
      border: "none",
      borderRadius: "4px",
      fontWeight: "bold",
      cursor: "pointer",
    },
  };

  MessageBox;

  function ProjectCards() {
    return (
      <Html
        transform
        position={[0, 0, 0]}
        rotation={[-1.544, 0, 0]}
        distanceFactor={2}
      >
        <div
          style={{
            width: 320,
            height: 330,
            background: "#fafafa",
            padding: 20,
            borderRadius: 14,
            overflowY: "auto",
            display: "grid",
            gap: 18,
            gridTemplateColumns: "1fr 1fr",
            fontFamily: "'Helvetica Neue', Helvetica, Arial, sans-serif",
            color: "#444",
            boxShadow: "0 4px 12px rgba(0, 0, 0, 0.05)",
          }}
        >
          {projects.map((project) => (
            <div
              key={project.name}
              style={{
                background: "white",
                padding: 18,
                borderRadius: 10,
                boxShadow: "0 1px 4px rgba(0,0,0,0.08)",
                display: "flex",
                flexDirection: "column",
                justifyContent: "space-between",
                transition: "background-color 0.3s ease",
                cursor: "default",
              }}
              onMouseEnter={(e) =>
                (e.currentTarget.style.backgroundColor = "#f0f4f8")
              }
              onMouseLeave={(e) =>
                (e.currentTarget.style.backgroundColor = "white")
              }
            >
              <h3
                style={{
                  margin: "0 0 10px 0",
                  fontWeight: "600",
                  fontSize: 15,
                  letterSpacing: "0.03em",
                }}
              >
                {project.name}
              </h3>
              <p
                style={{
                  fontSize: 12,
                  lineHeight: 1.4,
                  marginBottom: 15,
                  flexGrow: 1,
                  color: "#666",
                }}
              >
                {project.description}
              </p>
              <a
                href={project.url}
                target="_blank"
                rel="noopener noreferrer"
                style={{
                  fontSize: 12,
                  color: "#2978b5",
                  textDecoration: "underline",
                  alignSelf: "flex-start",
                  userSelect: "none",
                  fontWeight: "500",
                }}
                onMouseEnter={(e) => (e.currentTarget.style.color = "#1c4966")}
                onMouseLeave={(e) => (e.currentTarget.style.color = "#2978b5")}
              >
                View Repo
              </a>
            </div>
          ))}
        </div>
      </Html>
    );
  }

  //groundtexture
  const groundtexture = useLoader(TextureLoader, "./Textures/ground.jpg");
  const sofatexture = useLoader(TextureLoader, "./Textures/sofa.jpg");
  const chimneytexture = useLoader(TextureLoader, "./Textures/chimney.jpg");
  const couragetexture = useLoader(TextureLoader, "./Textures/courage.jpeg");

  const languagetexture = useLoader(TextureLoader, "./Textures/language.jpg");
  languagetexture.center.set(0.5, 0.5);

  languagetexture.repeat.x = 1.2;
  languagetexture.repeat.y = -1.2;
  couragetexture.center.set(0.5, 0.5);
  couragetexture.repeat.set(1, 1);
  couragetexture.wrapS = THREE.ClampToEdgeWrapping;
  couragetexture.wrapT = THREE.ClampToEdgeWrapping;
  couragetexture.rotation = Math.PI;
  groundtexture.wrapS = groundtexture.wrapT = THREE.RepeatWrapping;
  groundtexture.repeat.set(10, 10);
  groundtexture.rotation = Math.PI / 4;
  groundtexture.center.set(0.5, 0.5);
  //groundtexture
  const cupboardtexture = useLoader(TextureLoader, "./Textures/cupboard.jpg");
  //skills

  const blenderTexture = useLoader(
    TextureLoader,
    "./Textures/skills/blender.png"
  );
  blenderTexture.center.set(0.5, 0.5); // Set pivot to center
  blenderTexture.repeat.y = -1; // Rotate 45 degrees

  const figmaTexture = useLoader(TextureLoader, "./Textures/skills/figma.png");
  figmaTexture.center.set(0.5, 0.5); // Set pivot to center
  figmaTexture.repeat.y = -1; // Rotate 45 degrees

  const flutterTexture = useLoader(
    TextureLoader,
    "./Textures/skills/flutter.png"
  );
  const githubTexture = useLoader(
    TextureLoader,
    "https://img.icons8.com/glyph-neue/240/github.png"
  );

  const linkedinTexture = useLoader(
    TextureLoader,
    "https://img.icons8.com/color/240/linkedin.png"
  );

  const mailTexture = useLoader(
    TextureLoader,
    " https://img.icons8.com/?size=100&id=OumT4lIcOllS&format=png&color=000000"
  );
  const whatsappTexture = useLoader(
    TextureLoader,
    "https://img.icons8.com/?size=100&id=16713&format=png&color=000000"
  );

  const instagramTexture = useLoader(
    TextureLoader,
    "https://img.icons8.com/fluency/240/instagram-new.png"
  );
  const resumeTexture = useLoader(
    TextureLoader,
    "https://img.icons8.com/bubbles/200/resume.png"
  );
  resumeTexture.center.set(0.5, 0.5); // Set pivot to center
  resumeTexture.rotation = Math.PI / 2; // Rotate 45 degrees
  whatsappTexture.center.set(0.5, 0.5); // Set pivot to center
  whatsappTexture.rotation = Math.PI / 1; // Rotate 45 degrees
  whatsappTexture.repeat.y = 1;
  mailTexture.center.set(0.5, 0.5); // Set pivot to center
  mailTexture.rotation = Math.PI / 2; // Rotate 45 degrees

  instagramTexture.center.set(0.5, 0.5); // Set pivot to center
  instagramTexture.rotation = Math.PI / 2; // Rotate 45 degrees

  githubTexture.center.set(0.5, 0.5); // Set pivot to center
  githubTexture.rotation = Math.PI / 2; // Rotate 45 degrees

  linkedinTexture.center.set(0.5, 0.5); // Set pivot to center
  linkedinTexture.repeat.y = -1; // Rotate 45 degrees
  linkedinTexture.rotation = 11;
  const instagramLink = "https://www.instagram.com/deepan_wolfie/";
  const githubLink = "https://www.github.com/deepan1413";
  const resumeLink = "/Resume/Deepan_Resume.pdf";
  const linkedinLink = "https://www.linkedin.com/in/deepan-l-3aabb425b";
  const cubeSize = [0.02, 0.086, 0.02];
  const whatsappLink =
    "https://wa.me/919585582166?text=hello%20from%20you%20link";
  const mailLink =
    "mailto:deepan14132002@gmail.com?subject=Hello&body=Hi%20Deepan%2C%20I%20wanted%20to%20reach%20out%20to%20you.";
  flutterTexture.center.set(0.5, 0.5); // Set pivot to center
  flutterTexture.repeat.y = -1; // Rotate 45 degrees
  const contactTexture = useLoader(TextureLoader, "./Textures/contact.jpg");
  contactTexture.center.set(0.5, 0.5); // Set pivot to center
  contactTexture.repeat.y = -1;
  contactTexture.rotation = 4.7;
  const javaTexture = useLoader(TextureLoader, "./Textures/skills/java.png");
  javaTexture.center.set(0.5, 0.5); // Set pivot to center
  javaTexture.repeat.y = -1; // Rotate 45 degrees

  const javascriptTexture = useLoader(
    TextureLoader,
    "./Textures/skills/javascript.png"
  );
  javascriptTexture.center.set(0.5, 0.5); // Set pivot to center
  javascriptTexture.repeat.y = -1; // Rotate 45 degrees

  const linuxTexture = useLoader(TextureLoader, "./Textures/skills/linux.png");
  linuxTexture.center.set(0.5, 0.5); // Set pivot to center
  linuxTexture.repeat.y = -1; // Rotate 45 degrees

  const mysqlTexture = useLoader(TextureLoader, "./Textures/skills/mysql.png");
  mysqlTexture.center.set(0.5, 0.5); // Set pivot to center
  mysqlTexture.repeat.y = -1; // Rotate 45 degrees

  const networkTexture = useLoader(
    TextureLoader,
    "./Textures/skills/network.png"
  );
  networkTexture.center.set(0.5, 0.5); // Set pivot to center
  networkTexture.repeat.y = -1; // Rotate 45 degrees

  const nodejsTexture = useLoader(
    TextureLoader,
    "./Textures/skills/nodejs.png"
  );
  nodejsTexture.center.set(0.5, 0.5); // Set pivot to center
  nodejsTexture.repeat.y = -1; // Rotate 45 degrees

  const pythonTexture = useLoader(
    TextureLoader,
    "./Textures/skills/python.jpg"
  );
  pythonTexture.center.set(0.5, 0.5); // Set pivot to center
  pythonTexture.repeat.y = -1; // Rotate 45 degrees

  const reactTexture = useLoader(TextureLoader, "./Textures/skills/react.png");
  reactTexture.center.set(0.5, 0.5); // Set pivot to center
  reactTexture.repeat.y = -1; // Rotate 45 degrees

  const ThreejsTexture = useLoader(
    TextureLoader,
    "./Textures/skills/Threejs.png"
  );
  ThreejsTexture.center.set(0.5, 0.5); // Set pivot to center
  ThreejsTexture.repeat.y = -1; // Rotate 45 degrees

  cupboardtexture.wrapS = cupboardtexture.wrapT = THREE.RepeatWrapping;
  cupboardtexture.repeat.set(4, 4);
  cupboardtexture.rotation = Math.PI / 2;
  cupboardtexture.center.set(0.5, 0.5);
  //rooftexture
  const rooftexture = useLoader(TextureLoader, "./Textures/roof.jpg");
  rooftexture.wrapS = rooftexture.wrapT = THREE.RepeatWrapping;
  rooftexture.repeat.set(4, 4);
  rooftexture.rotation = Math.PI / 2;
  rooftexture.center.set(1, 1);
  //groundtexture
  //rooftexture
  const walltexture = useLoader(TextureLoader, "./Textures/wall.jpg");
  walltexture.wrapS = walltexture.wrapT = THREE.RepeatWrapping;
  walltexture.repeat.set(4, 4);
  walltexture.rotation = Math.PI / 1;
  walltexture.center.set(1, 1);
  //groundtexture
  //flootmattexture
  const flootmattexture = useLoader(TextureLoader, "./Textures/flootmat.jpg");
  flootmattexture.wrapS = flootmattexture.wrapT = THREE.RepeatWrapping;
  flootmattexture.repeat.set(5, 5);
  // wallpaper
  const wallpapertexture = useLoader(TextureLoader, "./Textures/wallpaper.jpg");
  wallpapertexture.wrapS = wallpapertexture.wrapT = THREE.RepeatWrapping;
  wallpapertexture.repeat.set(1, 1);
  wallpapertexture.center.set(1, 1);

  //groundtexture
  return (
    <group {...props} dispose={null}>
      <mesh
        geometry={nodes.atic_chair.geometry}
        material={nodes.atic_chair.material}
        position={[-2.855, 3.428, -1.102]}
        rotation={[0, -Math.PI / 2, 0]}
      >
        <meshBasicMaterial map={rooftexture} />
      </mesh>
      <mesh
        geometry={nodes.bed.geometry}
        material={nodes.bed.material}
        position={[-1.421, 2.863, -5.701]}
      >
        <meshBasicMaterial map={rooftexture} />
      </mesh>
      <mesh
        geometry={nodes.bedsheets.geometry}
        material={nodes.bedsheets.material}
        position={[-1.72, 3.341, -5.786]}
      >
        <meshStandardMaterial map={flootmattexture} />
      </mesh>
      <mesh
        geometry={nodes.BezierCurve.geometry}
        material={nodes.BezierCurve.material}
        position={[-0.659, 4.979, -4.659]}
        scale={0.901}
      >
        <meshStandardMaterial
          color="#aaaaaa"
          metalness={1}
          roughness={0.2}
          envMapIntensity={1}
        />
      </mesh>
      <group position={[-2.826, 0.802, -4.451]} scale={[0.543, 0.46, 0.052]}>
        <mesh
          geometry={nodes.Cube014.geometry}
          material={nodes.Cube014.material}
        >
          <meshBasicMaterial
            color="#4b2e2e" // brick red
            roughness={8} // rough surface
            metalness={0}
          />
        </mesh>
        <mesh
          geometry={nodes.Cube014_1.geometry}
          material={nodes.Cube014_1.material}
        >
          <meshBasicMaterial map={chimneytexture} />
        </mesh>
      </group>
      <mesh
        geometry={nodes.computer_table.geometry}
        material={nodes.computer_table.material}
        position={[-3.676, 3.37, -1.259]}
        rotation={[0, Math.PI / 2, 0]}
      >
        <meshStandardMaterial map={rooftexture} />
      </mesh>
      <group position={[-3.147, 0.484, -1.856]} rotation={[0, 0.323, 0]}>
        <mesh
          geometry={nodes.Plane012.geometry}
          material={nodes.Plane012.material}
        >
          <meshStandardMaterial map={sofatexture} />
        </mesh>
        <mesh
          geometry={nodes.Plane012_1.geometry}
          material={nodes.Plane012_1.material}
        >
          <meshStandardMaterial map={sofatexture} />
        </mesh>
      </group>
      <group position={[-2.411, -0.001, -3.529]} scale={[2.27, 2.27, 3.446]}>
        <mesh
          geometry={nodes.Plane002.geometry}
          material={nodes.Plane002.material}
        >
          /* house floor */
          <meshStandardMaterial map={walltexture} />
        </mesh>
        <mesh
          geometry={nodes.Plane002_1.geometry}
          material={nodes.Plane002_1.material}
        >
          //wall
          <meshStandardMaterial map={wallpapertexture} />
        </mesh>
        <mesh
          geometry={nodes.Plane002_2.geometry}
          material={nodes.Plane002_2.material}
        >
          <meshStandardMaterial map={walltexture} />
        </mesh>
        <mesh
          geometry={nodes.Plane002_3.geometry}
          material={nodes.Plane002_3.material}
        >
          <meshStandardMaterial color="#3d3120" />
        </mesh>
        <mesh
          geometry={nodes.Plane002_4.geometry}
          material={nodes.Plane002_4.material}
        >
          <meshBasicMaterial map={wallpapertexture} />
        </mesh>
      </group>
      <mesh
        geometry={nodes.mat.geometry}
        material={nodes.mat.material}
        position={[-3.04, 2.701, -1.176]}
        scale={[0.414, 0.682, 0.682]}
      >
        <meshStandardMaterial map={flootmattexture} />
      </mesh>
      <mesh
        geometry={nodes.matress.geometry}
        material={nodes.matress.material}
        position={[-1.425, 2.984, -5.696]}
      >
        <meshStandardMaterial map={flootmattexture} />
      </mesh>
      <mesh
        geometry={nodes.PCbase.geometry}
        material={nodes.PCbase.material}
        position={[-3.789, 3.346, -1.165]}
        scale={0.199}
      >
        <meshPhysicalMaterial
          color={"#d7bea1"}
          roughness={0.8}
          metalness={0.0}
          reflectivity={0.1}
          clearcoat={0.05}
        />
      </mesh>
      <mesh
        geometry={nodes.pillow.geometry}
        material={nodes.pillow.material}
        position={[-0.465, 3.221, -5.679]}
      >
        <meshStandardMaterial map={flootmattexture} />
      </mesh>
      <group position={[-2.425, 0.146, 0.96]}>
        <mesh
          geometry={nodes.Cube001.geometry}
          material={nodes.Cube001.material}
        >
          //Tv
          <meshPhysicalMaterial map={rooftexture} />
        </mesh>
        <mesh
          geometry={nodes.Cube001_1.geometry}
          material={nodes.Cube001_1.material}
        >
          //Tv
          <meshPhysicalMaterial map={rooftexture} />
        </mesh>
      </group>
      <group position={[-4.29, 0.126, -7.525]}>
        <mesh
          geometry={nodes.Cube027.geometry}
          material={nodes.Cube027.material}
        >
          <meshStandardMaterial map={rooftexture} />
        </mesh>
        <mesh
          geometry={nodes.Cube027_1.geometry}
          material={nodes.Cube027_1.material}
        >
          <meshStandardMaterial map={rooftexture} />
        </mesh>
      </group>
      <mesh
        geometry={nodes.rocking_chair.geometry}
        material={nodes.rocking_chair.material}
        position={[-2.769, 0.661, -3.555]}
        rotation={[0, -0.753, 0]}
      >
        <meshStandardMaterial map={rooftexture} />
      </mesh>
      <mesh
        geometry={nodes.roof.geometry}
        material={nodes.roof.material}
        position={[-2.411, 0.055, -3.529]}
        scale={[2.27, 2.27, 3.446]}
      >
        <meshStandardMaterial map={rooftexture} />
      </mesh>
      <mesh
        geometry={nodes.roug.geometry}
        material={nodes.roug.material}
        position={[-1.884, 0.357, -2.262]}
      >
        <meshStandardMaterial map={flootmattexture} />
      </mesh>
      <group position={[-4.813, 1.3, -3.278]} scale={[0.556, 1, 1.608]}>
        <mesh
          geometry={nodes.Cube006.geometry}
          material={nodes.Cube006.material}
        >
          <meshStandardMaterial map={rooftexture} />
        </mesh>
        <mesh
          geometry={nodes.Cube006_1.geometry}
          material={nodes.Cube006_1.material}
        >
          <meshStandardMaterial map={rooftexture} />
        </mesh>
        <mesh
          geometry={nodes.Cube006_2.geometry}
          material={nodes.Cube006_2.material}
        >
          <meshStandardMaterial map={rooftexture} />
        </mesh>
        <mesh
          geometry={nodes.Cube006_3.geometry}
          material={nodes.Cube006_3.material}
        >
          <meshStandardMaterial map={rooftexture} />
        </mesh>
      </group>
      <mesh
        geometry={nodes.trophy.geometry}
        material={nodes.trophy.material}
        position={[-2.515, 1.306, -4.39]}
        rotation={[0.005, -0.121, 0.038]}
      >
        <meshStandardMaterial
          color="#FFD700" // Gold color
          metalness={1} // Fully metallic
          roughness={0.2} // Slightly shiny surface
        />
      </mesh>
      <group position={[-1.845, 1.447, -4.533]}>
        <mesh
          geometry={nodes.Cube010.geometry}
          material={nodes.Cube010.material}
        >
          <meshStandardMaterial map={wallpapertexture} />
        </mesh>
        <mesh
          geometry={nodes.Cube010_1.geometry}
          material={nodes.Cube010_1.material}
        />
      </group>
      <group position={[-1.718, 3.729, -2.719]} rotation={[Math.PI / 2, 0, 0]}>
        <mesh
          geometry={nodes.Plane031.geometry}
          material={nodes.Plane031.material}
        >
          <meshPhysicalMaterial map={wallpapertexture} />
        </mesh>
        <mesh
          geometry={nodes.Plane031_1.geometry}
          material={nodes.Plane031_1.material}
        >
          <meshPhysicalMaterial map={wallpapertexture} />
        </mesh>
      </group>
      <mesh
        geometry={nodes.windmill.geometry}
        material={nodes.windmill.material}
        position={[-5.44, -0.54, -21.085]}
      >
          <meshStandardMaterial color="#8b3e2f" metalness={0.2} roughness={9} />
      </mesh>
      <mesh
        geometry={nodes.ground.geometry}
        material={nodes.ground.material}
        scale={28.338}
      >
        <meshStandardMaterial map={groundtexture} />
      </mesh>
      {/* <mesh
        geometry={nodes.windmillLeaf.geometry}
        material={nodes.windmillLeaf.material}
        position={[-5.451, 11.01, -19.27]}
      /> */}
      <mesh
        geometry={nodes.window.geometry}
        material={nodes.window.material}
        position={[-2.411, -0.001, -3.529]}
        scale={[2.27, 2.27, 3.446]}
      >
        <meshStandardMaterial color="#755a32" />
      </mesh>
      <mesh
        geometry={nodes.window2.geometry}
        material={nodes.window2.material}
        position={[-2.411, -0.001, -3.529]}
        scale={[2.27, 2.27, 3.446]}
      >
        <meshStandardMaterial color="#755a32" />
      </mesh>
      <mesh
        geometry={nodes.window3.geometry}
        material={nodes.window3.material}
        position={[-2.411, -0.001, -3.529]}
        scale={[2.27, 2.27, 3.446]}
      >
        <meshStandardMaterial color="#755a32" />
      </mesh>
      <mesh
        geometry={nodes.window4.geometry}
        material={nodes.window4.material}
        position={[-2.411, -0.001, -3.529]}
        scale={[2.27, 2.27, 3.446]}
      >
        <meshStandardMaterial color="#755a32" />
      </mesh>
      <mesh
        geometry={nodes.window5.geometry}
        material={nodes.window5.material}
        position={[-2.411, -0.001, -3.529]}
        scale={[2.27, 2.27, 3.446]}
      >
        <meshStandardMaterial color="#755a32" />
      </mesh>
      <mesh
        geometry={nodes.trophy001.geometry}
        material={nodes.trophy001.material}
        position={[-2.942, 1.306, -4.39]}
        rotation={[0.005, -0.121, 0.038]}
      >
        <meshStandardMaterial
          color="#FFD700" // Gold color
          metalness={1} // Fully metallic
          roughness={0.2} // Slightly shiny surface
        />
      </mesh>
      {/* <mesh
        geometry={nodes.shelfDoorRight.geometry}
        material={nodes.shelfDoorRight.material}
        position={[-2.393, 4.103, -6.612]}
        rotation={[-Math.PI, 0.824, -Math.PI]}
      >
        <meshPhysicalMaterial map={walltexture} />
      </mesh> */}
      <mesh
        geometry={nodes.shelfBody.geometry}
        material={nodes.shelfBody.material}
        position={[-2.388, 4.112, -6.787]}
      >
        <meshPhysicalMaterial map={walltexture} />
      </mesh>
      {/* <mesh
        geometry={nodes.shelfDoorLeft.geometry}
        material={nodes.shelfDoorLeft.material}
        position={[-3.148, 4.112, -6.612]}
        rotation={[Math.PI, -0.868, Math.PI]}
      >
        <meshPhysicalMaterial map={walltexture} />
      </mesh> */}
      <mesh
        geometry={nodes.skillFrame1.geometry}
        material={nodes.skillFrame1.material}
        position={[-3.046, 4.313, -6.732]}
        rotation={[1.544, 0, 0]}
        scale={0.081}
      >
        <meshBasicMaterial color={"#FFD700"} />
      </mesh>
      <mesh
        geometry={nodes.skillPhoto1.geometry}
        material={nodes.skillPhoto1.material}
        position={[-3.046, 4.313, -6.732]}
        rotation={[1.544, 0, 0]}
        scale={0.081}
      >
        <meshBasicMaterial map={flutterTexture} />
      </mesh>
      <mesh
        geometry={nodes.skillFrame2.geometry}
        material={nodes.skillFrame2.material}
        position={[-2.859, 4.313, -6.732]}
        rotation={[1.544, 0, 0]}
        scale={0.081}
      >
        <meshBasicMaterial color={"#FFD700"} />
      </mesh>
      <mesh
        geometry={nodes.skillPhoto2.geometry}
        material={nodes.skillPhoto2.material}
        position={[-2.859, 4.313, -6.732]}
        rotation={[1.544, 0, 0]}
        scale={0.081}
      >
        <meshBasicMaterial map={reactTexture} />
      </mesh>
      <mesh
        geometry={nodes.skillFrame3.geometry}
        material={nodes.skillFrame3.material}
        position={[-2.677, 4.313, -6.732]}
        rotation={[1.544, 0, 0]}
        scale={0.081}
      >
        <meshBasicMaterial color={"#FFD700"} />
      </mesh>
      <mesh
        geometry={nodes.skillPhoto3.geometry}
        material={nodes.skillPhoto3.material}
        position={[-2.677, 4.313, -6.732]}
        rotation={[1.544, 0, 0]}
        scale={0.081}
      >
        <meshBasicMaterial map={ThreejsTexture} />
      </mesh>
      <mesh
        geometry={nodes.skillFrame4.geometry}
        material={nodes.skillFrame4.material}
        position={[-2.499, 4.313, -6.732]}
        rotation={[1.544, 0, 0]}
        scale={0.081}
      >
        <meshBasicMaterial color={"#FFD700"} />
      </mesh>
      <mesh
        geometry={nodes.skillPhoto4.geometry}
        material={nodes.skillPhoto4.material}
        position={[-2.499, 4.313, -6.732]}
        rotation={[1.544, 0, 0]}
        scale={0.081}
      >
        <meshBasicMaterial map={figmaTexture} />
      </mesh>
      <mesh
        geometry={nodes.skillFrame5.geometry}
        material={nodes.skillFrame5.material}
        position={[-3.046, 4.132, -6.732]}
        rotation={[1.544, 0, 0]}
        scale={0.081}
      >
        <meshBasicMaterial color={"#FFD700"} />
      </mesh>
      <mesh
        geometry={nodes.skillFrame6.geometry}
        material={nodes.skillFrame6.material}
        position={[-2.859, 4.132, -6.732]}
        rotation={[1.544, 0, 0]}
        scale={0.081}
      >
        <meshBasicMaterial color={"#FFD700"} />
      </mesh>
      <mesh
        geometry={nodes.skillFrame7.geometry}
        material={nodes.skillFrame7.material}
        position={[-2.677, 4.132, -6.732]}
        rotation={[1.544, 0, 0]}
        scale={0.081}
      >
        <meshBasicMaterial color={"#FFD700"} />
      </mesh>
      <mesh
        geometry={nodes.skillFrame8.geometry}
        material={nodes.skillFrame8.material}
        position={[-2.499, 4.132, -6.732]}
        rotation={[1.544, 0, 0]}
        scale={0.081}
      >
        <meshBasicMaterial color={"#FFD700"} />
      </mesh>
      <mesh
        geometry={nodes.skillPhoto5.geometry}
        material={nodes.skillPhoto5.material}
        position={[-3.046, 4.132, -6.732]}
        rotation={[1.544, 0, 0]}
        scale={0.081}
      >
        <meshBasicMaterial map={blenderTexture} />
      </mesh>
      <mesh
        geometry={nodes.skillPhoto6.geometry}
        material={nodes.skillPhoto6.material}
        position={[-2.859, 4.132, -6.732]}
        rotation={[1.544, 0, 0]}
        scale={0.081}
      >
        <meshBasicMaterial map={javaTexture} />
      </mesh>
      <mesh
        geometry={nodes.skillPhoto7.geometry}
        material={nodes.skillPhoto7.material}
        position={[-2.677, 4.132, -6.732]}
        rotation={[1.544, 0, 0]}
        scale={0.081}
      >
        <meshBasicMaterial map={javascriptTexture} />
      </mesh>
      <mesh
        geometry={nodes.skillPhoto8.geometry}
        material={nodes.skillPhoto8.material}
        position={[-2.499, 4.132, -6.732]}
        rotation={[1.544, 0, 0]}
        scale={0.081}
      >
        <meshBasicMaterial map={pythonTexture} />
      </mesh>
      <mesh
        geometry={nodes.skillFrame12.geometry}
        material={nodes.skillFrame12.material}
        position={[-2.499, 3.911, -6.732]}
        rotation={[1.544, 0, 0]}
        scale={0.081}
      >
        <meshBasicMaterial color={"#FFD700"} />
      </mesh>
      <mesh
        geometry={nodes.skillFrame11.geometry}
        material={nodes.skillFrame11.material}
        position={[-2.677, 3.911, -6.732]}
        rotation={[1.544, 0, 0]}
        scale={0.081}
      >
        <meshBasicMaterial color={"#FFD700"} />
      </mesh>
      <mesh
        geometry={nodes.skillFrame10.geometry}
        material={nodes.skillFrame10.material}
        position={[-2.859, 3.911, -6.732]}
        rotation={[1.544, 0, 0]}
        scale={0.081}
      >
        <meshBasicMaterial color={"#FFD700"} />
      </mesh>
      <mesh
        geometry={nodes.skillFrame9.geometry}
        material={nodes.skillFrame9.material}
        position={[-3.046, 3.911, -6.732]}
        rotation={[1.544, 0, 0]}
        scale={0.081}
      >
        <meshBasicMaterial color={"#FFD700"} />
      </mesh>
      <mesh
        geometry={nodes.skillPhoto12.geometry}
        material={nodes.skillPhoto12.material}
        position={[-2.499, 3.911, -6.732]}
        rotation={[1.544, 0, 0]}
        scale={0.081}
      >
        <meshBasicMaterial map={mysqlTexture} />
      </mesh>
      <mesh
        geometry={nodes.skillPhoto11.geometry}
        material={nodes.skillPhoto11.material}
        position={[-2.677, 3.911, -6.732]}
        rotation={[1.544, 0, 0]}
        scale={0.081}
      >
        <meshBasicMaterial map={networkTexture} />
      </mesh>
      <mesh
        geometry={nodes.skillPhoto10.geometry}
        material={nodes.skillPhoto10.material}
        position={[-2.859, 3.911, -6.732]}
        rotation={[1.544, 0, 0]}
        scale={0.081}
      >
        <meshBasicMaterial map={nodejsTexture} />
      </mesh>
      <mesh
        geometry={nodes.skillPhoto9.geometry}
        material={nodes.skillPhoto9.material}
        position={[-3.046, 3.911, -6.732]}
        rotation={[1.544, 0, 0]}
        scale={0.081}
      >
        <meshBasicMaterial map={linuxTexture} />
      </mesh>
      <mesh
        geometry={nodes.PhotoFrame0.geometry}
        material={nodes.PhotoFrame0.material}
        position={[-2.987, 4.968, -7.002]}
        rotation={[1.544, 0, 0]}
        scale={[0.212, 0.081, 0.14]}
      >
        <meshBasicMaterial map={walltexture} />
      </mesh>
      <mesh
        geometry={nodes.PhotoFrameScene0.geometry}
        material={nodes.PhotoFrameScene0.material}
        position={[-2.987, 4.968, -7.002]}
        rotation={[1.544, 0, 0]}
        scale={[0.212, 0.081, 0.14]}
      >
        <meshBasicMaterial map={languagetexture} />
      </mesh>
      <mesh
        geometry={nodes.PhotoFrame1.geometry}
        material={nodes.PhotoFrame1.material}
        position={[-0.289, 3.923, -5.723]}
        rotation={[1.572, -0.027, 1.604]}
        scale={[0.446, 0.091, 0.309]}
      >
        <meshBasicMaterial map={walltexture} />
      </mesh>
      <mesh
        geometry={nodes.PhotoFrameScene1.geometry}
        material={nodes.PhotoFrameScene1.material}
        position={[-0.289, 3.923, -5.723]}
        rotation={[1.572, -0.027, 1.604]}
        scale={[0.446, 0.091, 0.309]}
      >
        <meshBasicMaterial map={couragetexture} />
      </mesh>
      <mesh
        geometry={nodes.PhotoFrame2.geometry}
        material={nodes.PhotoFrame2.material}
        position={[-1.458, 3.923, -4.482]}
        rotation={[1.598, 0, -3.129]}
        scale={[0.446, 0.091, 0.309]}
      >
        <meshBasicMaterial map={walltexture} />
      </mesh>
      <mesh
        geometry={nodes.PhotoFrameScene2.geometry}
        material={nodes.PhotoFrameScene2.material}
        position={[-1.458, 3.923, -4.482]}
        rotation={[1.598, 0, -3.129]}
        scale={[0.446, 0.091, 0.309]}
      >
        {/* <ProjectCards /> */}
        {/* TODO */}
      </mesh>
      <mesh
        geometry={nodes.PhotoFrame3.geometry}
        material={nodes.PhotoFrame3.material}
        position={[-2.22, 4.522, -0.072]}
        rotation={[1.598, 0, -3.129]}
        scale={[0.446, 0.091, 0.309]}
      >
        <meshBasicMaterial map={walltexture} />
      </mesh>
      <mesh
        geometry={nodes.PhotoFrameScene3.geometry}
        material={nodes.PhotoFrameScene3.material}
        position={[-2.22, 4.522, -0.072]}
        rotation={[1.598, 0, -3.129]}
        scale={[0.446, 0.091, 0.309]}
      >
        {/* <MessageBox />
        TODO */}
      </mesh>
      <mesh
        geometry={nodes.PC.geometry}
        material={nodes.PC.material}
        position={[-3.816, 3.744, -1.174]}
        rotation={[0, 0, -Math.PI / 2]}
        scale={[0.086, 0.086, 0.114]}
      >
        <meshPhysicalMaterial
          color={"#d7bea1"}
          roughness={0.8}
          metalness={0.0}
          reflectivity={0.1}
          clearcoat={0.05}
        />
      </mesh>
      <mesh
        geometry={nodes.PCscreen.geometry}
        material={nodes.PCscreen.material}
        position={[-3.816, 3.744, -1.174]}
        rotation={[0, 0, -Math.PI / 2]}
        scale={[0.086, 0.086, 0.114]}
      >
        <meshBasicMaterial map={contactTexture} />
      </mesh>
      //screen buttons
      <mesh
        geometry={nodes.PCscreen.geometry}
        material={nodes.PCscreen.material}
        position={[-3.806, 3.844, -1.284]}
        //front-back,top-down ,right-left
        rotation={[0, 0, -Math.PI / 2]}
        scale={cubeSize}
        // h,0.086,w
        onClick={(event) => {
          event.stopPropagation();
          handleClick(githubLink);
        }}
      >
        <meshBasicMaterial map={githubTexture} transparent />
      </mesh>
      <mesh
        geometry={nodes.PCscreen.geometry}
        material={nodes.PCscreen.material}
        position={[-3.806, 3.844, -1.194]}
        rotation={[0, 0, -Math.PI / 2]}
        scale={cubeSize}
        // h
        onClick={(event) => {
          event.stopPropagation();
          handleClick(whatsappLink);
        }}
      >
        <meshBasicMaterial map={whatsappTexture} transparent />
      </mesh>
      <mesh
        geometry={nodes.PCscreen.geometry}
        material={nodes.PCscreen.material}
        position={[-3.806, 3.844, -1.094]}
        rotation={[0, 0, -Math.PI / 2]}
        scale={cubeSize}
        // h
        onClick={(event) => {
          event.stopPropagation();
          handleClick(resumeLink);
        }}
      >
        <meshBasicMaterial map={resumeTexture} transparent />
      </mesh>
      <mesh
        geometry={nodes.PCscreen.geometry}
        material={nodes.PCscreen.material}
        position={[-3.806, 3.644, -1.284]}
        rotation={[0, 0, -Math.PI / 2]}
        scale={cubeSize}
        // h
        onClick={(event) => {
          event.stopPropagation();
          handleClick(instagramLink);
        }}
      >
        <meshBasicMaterial map={instagramTexture} transparent />
      </mesh>
      <mesh
        geometry={nodes.PCscreen.geometry}
        material={nodes.PCscreen.material}
        position={[-3.806, 3.644, -1.194]}
        rotation={[0, 0, -Math.PI / 2]}
        scale={cubeSize}
        // h
        onClick={(event) => {
          event.stopPropagation();
          handleClick(mailLink);
        }}
      >
        <meshBasicMaterial map={mailTexture} transparent />
      </mesh>
      <mesh
        geometry={nodes.PCscreen.geometry}
        material={nodes.PCscreen.material}
        position={[-3.806, 3.644, -1.094]}
        rotation={[0, 0, -Math.PI / 2]}
        scale={cubeSize}
        // h
        onClick={(event) => {
          event.stopPropagation();
          handleClick(linkedinLink);
        }}
      >
        <meshBasicMaterial map={linkedinTexture} transparent />
      </mesh>
      <mesh
        geometry={nodes.TV.geometry}
        material={nodes.TV.material}
        position={[-0.392, 0.75, -2.192]}
        rotation={[0, 0.002, -Math.PI / 2]}
        scale={[0.371, 0.371, 0.511]}
      >
        //Tv
        <meshPhysicalMaterial
          map={walltexture}
          roughness={0.6}
          metalness={0.05}
          reflectivity={0.2}
          clearcoat={0.1}
        />
      </mesh>
      {/* <mesh
        geometry={nodes.TVScreen.geometry}
        material={nodes.TVScreen.material}
        position={[-0.392, 0.75, -2.192]}
        rotation={[0, 0.002, -Math.PI / 2]}
        scale={0.534}
      >
        <meshPhysicalMaterial map={TVScreen} />
      </mesh> */}
      //frontDoor
      {/* <mesh
        geometry={nodes.frontDoor.geometry}
        material={nodes.frontDoor.material}
        position={[-3.051, 1.155, -0.123]}
        scale={[2.27, 2.27, 3.446]}
      >
        <meshStandardMaterial color="#2a9f7c" />
      </mesh> */}
      <group position={[-0.671, 1.131, -4.533]}>
        <mesh
          geometry={nodes.Cube013.geometry}
          material={nodes.Cube013.material}
        >
          <meshStandardMaterial color="#2a9f7c" />
        </mesh>
        <mesh
          geometry={nodes.Cube013_1.geometry}
          material={nodes.Cube013_1.material}
        >
          <meshStandardMaterial color="#2a9f7c" />
        </mesh>
        <mesh
          geometry={nodes.Cube013_2.geometry}
          material={nodes.Cube013_2.material}
        >
          <meshStandardMaterial color="#2a9f7c" />
        </mesh>
      </group>
      <mesh
        geometry={nodes.bedroomDoor.geometry}
        material={nodes.bedroomDoor.material}
        position={[-2.835, 3.598, -4.444]}
        rotation={[Math.PI / 2, 0, 0.446]}
      >
        <meshStandardMaterial color="#2a9f7c" />
      </mesh>
      <group position={[-2.411, -0.001, -3.529]} scale={[2.27, 2.27, 3.446]}>
        <mesh
          geometry={nodes.Plane022.geometry}
          material={nodes.Plane022.material}
        >
          <meshStandardMaterial color="#2a9f7c" />
        </mesh>
        <mesh
          geometry={nodes.Plane022_1.geometry}
          material={nodes.Plane022_1.material}
        >
          <meshStandardMaterial color="#2a9f7c" />
        </mesh>
      </group>
      <mesh
        geometry={nodes.frontDoorFrame.geometry}
        material={nodes.frontDoorFrame.material}
        position={[-2.411, -0.001, -3.529]}
        scale={[2.27, 2.27, 3.446]}
      >
        <meshStandardMaterial color="#2a9f7c" />
      </mesh>
      <mesh
        geometry={nodes.kitchenDoorFrame.geometry}
        material={nodes.kitchenDoorFrame.material}
        position={[-1.845, 1.447, -4.533]}
      >
        <meshStandardMaterial color="#2a9f7c" />
      </mesh>
      <mesh
        geometry={nodes.backDoorFrame.geometry}
        material={nodes.backDoorFrame.material}
        position={[-2.411, -0.001, -3.529]}
        scale={[2.27, 2.27, 3.446]}
      >
        <meshStandardMaterial color="#2a9f7c" />
      </mesh>
      <mesh
        geometry={nodes.bedroomDoorFrame.geometry}
        material={nodes.bedroomDoorFrame.material}
        position={[-1.718, 3.729, -2.719]}
        rotation={[Math.PI / 2, 0, 0]}
      >
        <meshStandardMaterial color="#2a9f7c" />
      </mesh>
    </group>
  );
}

useGLTF.preload("/model.glb");
